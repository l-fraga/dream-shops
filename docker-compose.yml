# ---------- REDE COMPARTILHADA ----------
networks:
  dreamshops:
    driver: bridge

# ---------- VOLUMES PERSISTENTES ----------
volumes:
  dreamshops-postgres-data:
    external: true
  dreamshops-prometheus-data:
    external: true
  dreamshops-grafana-data:
    external: true
  dreamshops-sonarqube-data:
    external: true
  dreamshops-sonarqube-extensions:
    external: true
  dreamshops-sonarqube-logs:
    external: true
  dreamshops-app-data:
    external: true

# ---------- SERVIÇOS ----------
services:
  # ------------------ PostgreSQL ------------------
  postgres:
    container_name: dreamshops-db
    image: postgres:16
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - dreamshops
    volumes:
      - dreamshops-postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRESQL_EXTERNAL_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      start_period: 10s
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ------------------ PostgreSQL Exporter ------------------
  postgresql-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgresql-exporter
    restart: unless-stopped
    env_file: .env
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - dreamshops
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9187/metrics || exit 1"]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M

  # ------------------ Spring Boot APP ------------------
  app:
    container_name: dreamshops-app
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        BUILDKIT_INLINE_CACHE: 1
    restart: unless-stopped
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dreamshops
    ports:
      - "${APP_EXTERNAL_PORT:-8080}:8080"
    volumes:
      - dreamshops-app-data:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-s", "-o", "/dev/null", "-w", "%{http_code}", "http://localhost:8080/actuator/health"]
      start_period: 90s
      interval: 30s
      timeout: 10s
      retries: 0
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # ------------------ Prometheus ------------------
  prometheus:
    container_name: dreamshops-prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - dreamshops-prometheus-data:/prometheus
      - ./src/main/java/com/dailycodework/dreamshops/utils/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./src/main/java/com/dailycodework/dreamshops/utils/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
    networks:
      - dreamshops
    ports:
      - "${PROMETHEUS_EXTERNAL_PORT:-9090}:9090"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ------------------ SonarQube ------------------
  sonarqube:
    container_name: dreamshops-sonarqube
    image: sonarqube:lts
    restart: unless-stopped
    env_file: .env
    environment:
      - SONAR_WEB_HOST=${SONAR_WEB_HOST}
      - SONAR_WEB_PORT=${SONAR_WEB_PORT}
      - SONAR_WEB_CONTEXT=${SONAR_WEB_CONTEXT}
      - SONAR_JDBC_URL=${SONAR_JDBC_URL}
      - SONAR_JDBC_USERNAME=${SONAR_JDBC_USERNAME}
      - SONAR_JDBC_PASSWORD=${SONAR_JDBC_PASSWORD}
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=${SONAR_ES_BOOTSTRAP_CHECKS_DISABLE}
      - SONAR_SEARCH_JAVAOPTS=-Xmx512m -Xms128m
      - SONAR_CE_JAVAOPTS=-Xmx512m -Xms128m
      - SONAR_WEB_JAVAOPTS=-Xmx512m -Xms128m
    volumes:
      - dreamshops-sonarqube-data:/opt/sonarqube/data
      - dreamshops-sonarqube-extensions:/opt/sonarqube/extensions
      - dreamshops-sonarqube-logs:/opt/sonarqube/logs
      # Configuração personalizada centralizada
      - ./src/main/java/com/dailycodework/dreamshops/utils/sonarqube/conf/sonar.properties:/opt/sonarqube/conf/sonar.properties:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dreamshops
    ports:
      - "${SONARQUBE_EXTERNAL_PORT:-9000}:9000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/api/system/status || exit 1"]
      start_period: 120s
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # ------------------ Alertmanager ------------------
  alertmanager:
    container_name: dreamshops-alertmanager
    image: prom/alertmanager:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.listen-address=:9093'
    volumes:
      - ./src/main/java/com/dailycodework/dreamshops/utils/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - dreamshops
    ports:
      - "${ALERTMANAGER_EXTERNAL_PORT:-9093}:9093"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9093/-/healthy || exit 1"]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ------------------ Grafana ------------------
  grafana:
    container_name: dreamshops-grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    env_file: .env
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-piechart-panel
      - GF_LOG_LEVEL=info
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_SERVER_ROOT_URL=http://localhost:${GRAFANA_EXTERNAL_PORT:-3000}
    volumes:
      - dreamshops-grafana-data:/var/lib/grafana
      - ./src/main/java/com/dailycodework/dreamshops/utils/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./src/main/java/com/dailycodework/dreamshops/utils/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - dreamshops
    ports:
      - "${GRAFANA_EXTERNAL_PORT:-3000}:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M